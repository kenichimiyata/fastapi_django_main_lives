#!/usr/bin/env python3
"""
🎨 Artisan - Laravel風コマンドラインツール for Python
=====================================================

Laravel ArtisanコマンドをPythonで再現
便利なCLIツールで開発効率を大幅向上
"""

import sys
import os
import argparse
from pathlib import Path
from datetime import datetime
import importlib.util

class ArtisanCommand:
    """Artisan風コマンドベースクラス"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        
    def handle(self, *args, **kwargs):
        """コマンド実行のメインロジック"""
        raise NotImplementedError("handle method must be implemented")

class MakeControllerCommand(ArtisanCommand):
    """コントローラー作成コマンド"""
    
    def handle(self, name, *args, **kwargs):
        controller_path = self.project_root / "laravel_app" / "Http" / "Controllers" / f"{name}.py"
        controller_content = f'''"""
{name} Controller
=================

Generated by Artisan on {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
"""

from fastapi import APIRouter, Request, HTTPException
from typing import Dict, Any

router = APIRouter()

class {name}:
    """
    {name} Controller
    
    Handle HTTP requests for {name.lower()} related operations
    """
    
    def __init__(self):
        self.router = router
    
    @router.get("/")
    async def index(self) -> Dict[str, Any]:
        """
        Display a listing of the resource
        """
        return {{"message": "Hello from {name}!"}}
    
    @router.post("/")
    async def store(self, request: Request) -> Dict[str, Any]:
        """
        Store a newly created resource
        """
        return {{"message": "Resource created successfully"}}
    
    @router.get("/{{id}}")
    async def show(self, id: int) -> Dict[str, Any]:
        """
        Display the specified resource
        """
        return {{"message": f"Showing resource {{id}}"}}
    
    @router.put("/{{id}}")
    async def update(self, id: int, request: Request) -> Dict[str, Any]:
        """
        Update the specified resource
        """
        return {{"message": f"Resource {{id}} updated successfully"}}
    
    @router.delete("/{{id}}")
    async def destroy(self, id: int) -> Dict[str, Any]:
        """
        Remove the specified resource
        """
        return {{"message": f"Resource {{id}} deleted successfully"}}
'''
        
        # ディレクトリ作成
        controller_path.parent.mkdir(parents=True, exist_ok=True)
        
        # ファイル作成
        with open(controller_path, 'w', encoding='utf-8') as f:
            f.write(controller_content)
            
        print(f"✅ Controller created: {controller_path}")
        return True

class MakeModelCommand(ArtisanCommand):
    """モデル作成コマンド"""
    
    def handle(self, name, *args, **kwargs):
        model_path = self.project_root / "laravel_app" / "Models" / f"{name}.py"
        model_content = f'''"""
{name} Model
============

Generated by Artisan on {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
"""

from sqlalchemy import Column, Integer, String, DateTime, Boolean
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
from typing import Optional

Base = declarative_base()

class {name}(Base):
    """
    {name} Model
    
    SQLAlchemy model for {name.lower()} table
    """
    
    __tablename__ = "{name.lower()}s"
    
    # Primary Key
    id = Column(Integer, primary_key=True, index=True)
    
    # Timestamps
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    
    # Add your fields here
    # name = Column(String(255), nullable=False)
    # email = Column(String(255), unique=True, index=True)
    # is_active = Column(Boolean, default=True)
    
    def __repr__(self):
        return f"<{name}(id={{self.id}})>"
    
    def to_dict(self):
        """Convert model to dictionary"""
        return {{
            "id": self.id,
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None,
            # Add your fields here
        }}
'''
        
        # ディレクトリ作成
        model_path.parent.mkdir(parents=True, exist_ok=True)
        
        # ファイル作成
        with open(model_path, 'w', encoding='utf-8') as f:
            f.write(model_content)
            
        print(f"✅ Model created: {model_path}")
        return True

class MakeServiceCommand(ArtisanCommand):
    """サービス作成コマンド"""
    
    def handle(self, name, *args, **kwargs):
        service_path = self.project_root / "laravel_app" / "Services" / f"{name}Service.py"
        service_content = f'''"""
{name} Service
==============

Generated by Artisan on {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
"""

from typing import Dict, List, Any, Optional
import asyncio

class {name}Service:
    """
    {name} Service
    
    Business logic for {name.lower()} operations
    """
    
    def __init__(self):
        pass
    
    async def get_all(self) -> List[Dict[str, Any]]:
        """
        Get all {name.lower()} records
        """
        # Implement your logic here
        return []
    
    async def get_by_id(self, id: int) -> Optional[Dict[str, Any]]:
        """
        Get {name.lower()} by ID
        """
        # Implement your logic here
        return None
    
    async def create(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Create new {name.lower()}
        """
        # Implement your logic here
        return {{"message": "{name} created successfully"}}
    
    async def update(self, id: int, data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Update {name.lower()}
        """
        # Implement your logic here
        return {{"message": f"{name} {{id}} updated successfully"}}
    
    async def delete(self, id: int) -> Dict[str, Any]:
        """
        Delete {name.lower()}
        """
        # Implement your logic here
        return {{"message": f"{name} {{id}} deleted successfully"}}
'''
        
        # ディレクトリ作成
        service_path.parent.mkdir(parents=True, exist_ok=True)
        
        # ファイル作成
        with open(service_path, 'w', encoding='utf-8') as f:
            f.write(service_content)
            
        print(f"✅ Service created: {service_path}")
        return True

class MakeHybridControllerCommand(ArtisanCommand):
    """ハイブリッドコントローラー作成コマンド"""
    
    def handle(self, name, controller_type="hybrid", *args, **kwargs):
        if controller_type.lower() == "api":
            base_path = self.project_root / "laravel_app" / "Http" / "Controllers" / "Api"
            parent_class = "FastApiController"
            from_import = "from app.Http.Controllers.Api.FastApiController import FastApiController"
        elif controller_type.lower() == "web":
            base_path = self.project_root / "laravel_app" / "Http" / "Controllers" / "Web"
            parent_class = "WebController"
            from_import = "from app.Http.Controllers.Web.WebController import WebController"
        elif controller_type.lower() == "gradio":
            base_path = self.project_root / "laravel_app" / "Http" / "Controllers" / "Gradio"
            parent_class = "GradioController"
            from_import = "from app.Http.Controllers.Gradio.GradioController import GradioController"
        else:
            base_path = self.project_root / "laravel_app" / "Http" / "Controllers"
            parent_class = "HybridController"
            from_import = "from app.Http.Controllers.HybridController import HybridController"
        
        controller_path = base_path / f"{name}.py"
        controller_content = f'''"""
{name} - Laravel風ハイブリッドコントローラー
Generated by Artisan on {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
Type: {controller_type.upper()}
"""

{from_import}
from fastapi import Request, HTTPException
from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)

class {name}({parent_class}):
    """
    {name} 
    
    Laravel風の{controller_type.upper()}コントローラー
    Django + FastAPI + Gradio 統合対応
    """
    
    def __init__(self):
        super().__init__()
        # カスタム初期化処理をここに追加
        
    async def index(self) -> Dict[str, Any]:
        """
        リソース一覧表示
        GET /
        """
        return {{
            "status": "success",
            "data": [
                {{"id": 1, "name": "Sample Resource", "controller": "{name}"}},
            ],
            "message": f"{{self.__class__.__name__}} index called successfully",
            "controller_type": "{controller_type}"
        }}
    
    async def store(self, request: Request) -> Dict[str, Any]:
        """
        新規リソース作成
        POST /
        """
        try:
            body = await request.json()
            return {{
                "status": "success",
                "data": {{
                    "id": 999,
                    "created_data": body,
                    "controller": "{name}",
                    "created_at": "{datetime.now().isoformat()}"
                }},
                "message": "Resource created successfully"
            }}
        except Exception as e:
            logger.error(f"Store error in {{self.__class__.__name__}}: {{e}}")
            raise HTTPException(status_code=400, detail=str(e))
    
    async def show(self, id: int) -> Dict[str, Any]:
        """
        特定リソース表示
        GET /{{id}}
        """
        return {{
            "status": "success",
            "data": {{
                "id": id,
                "name": f"Resource {{id}}",
                "controller": "{name}",
                "type": "{controller_type}_resource"
            }},
            "message": f"Resource {{id}} retrieved successfully"
        }}
    
    async def update(self, id: int, request: Request) -> Dict[str, Any]:
        """
        リソース更新
        PUT /{{id}}
        """
        try:
            body = await request.json()
            return {{
                "status": "success",
                "data": {{
                    "id": id,
                    "updated_data": body,
                    "controller": "{name}",
                    "updated_at": "{datetime.now().isoformat()}"
                }},
                "message": f"Resource {{id}} updated successfully"
            }}
        except Exception as e:
            logger.error(f"Update error in {{self.__class__.__name__}}: {{e}}")
            raise HTTPException(status_code=400, detail=str(e))
    
    async def destroy(self, id: int) -> Dict[str, Any]:
        """
        リソース削除
        DELETE /{{id}}
        """
        return {{
            "status": "success",
            "data": {{
                "id": id,
                "controller": "{name}",
                "deleted_at": "{datetime.now().isoformat()}"
            }},
            "message": f"Resource {{id}} deleted successfully"
        }}'''

        if controller_type.lower() == "gradio":
            controller_content += f'''
    
    def gradio_process(self, input_text: str) -> str:
        """
        Gradio 処理関数
        """
        try:
            # カスタム処理をここに実装
            processed_result = f"{{self.__class__.__name__}} processed: {{input_text}}"
            return processed_result
        except Exception as e:
            logger.error(f"Gradio processing error: {{e}}")
            return f"エラーが発生しました: {{e}}"'''

        controller_content += f'''

# インスタンス作成（必要に応じて）
# {name.lower()}_instance = {name}()
# router = {name.lower()}_instance.router  # FastAPI用
'''
        
        # ディレクトリ作成
        controller_path.parent.mkdir(parents=True, exist_ok=True)
        
        # ファイル作成
        with open(controller_path, 'w', encoding='utf-8') as f:
            f.write(controller_content)
            
        print(f"✅ {controller_type.upper()} Controller created: {controller_path}")
        print(f"📁 Location: {controller_path.relative_to(self.project_root)}")
        print(f"🎯 Type: {controller_type.upper()} (Django + FastAPI + Gradio compatible)")
        return True

class ServeCommand(ArtisanCommand):
    """開発サーバー起動コマンド"""
    
    def handle(self, port=8000, host="0.0.0.0", *args, **kwargs):
        import subprocess
        print(f"🚀 Starting development server on {host}:{port}")
        try:
            subprocess.run([
                "uvicorn", 
                "core.app:app", 
                "--host", str(host), 
                "--port", str(port), 
                "--reload"
            ])
        except KeyboardInterrupt:
            print("\n👋 Server stopped")

class ListRoutesCommand(ArtisanCommand):
    """ルート一覧表示コマンド"""
    
    def handle(self, *args, **kwargs):
        print("🛣️  Application Routes:")
        print("+" + "-" * 50 + "+")
        print("| Method | URI | Controller |")
        print("+" + "-" * 50 + "+")
        
        # ルート情報を動的に取得（実装が必要）
        routes = [
            ("GET", "/", "HomeController@index"),
            ("GET", "/api/health", "HealthController@check"),
        ]
        
        for method, uri, controller in routes:
            print(f"| {method:<6} | {uri:<15} | {controller:<20} |")
        
        print("+" + "-" * 50 + "+")

class ProjectInfoCommand(ArtisanCommand):
    """プロジェクト情報表示コマンド"""
    
    def handle(self, *args, **kwargs):
        print("🏗️  Laravel構造対応 Django+FastAPI+Gradio プロジェクト")
        print("=" * 60)
        print(f"📁 プロジェクトルート: {self.project_root}")
        print(f"🚀 メインエントリーポイント: app.py (Hugging Face Spaces互換)")
        print(f"⚙️  ASGI設定: mysite/asgi.py")
        print(f"🔧 ブートストラップ: bootstrap/app.py")
        print()
        
        # Laravel構造の確認
        laravel_dirs = [
            "laravel_app/Http/Controllers/Api",
            "laravel_app/Http/Controllers/Web", 
            "laravel_app/Http/Controllers/Gradio",
            "laravel_app/Services",
            "laravel_app/Models",
            "laravel_app/Console",
            "routes",
            "bootstrap"
        ]
        
        print("📂 Laravel構造ディレクトリ:")
        for directory in laravel_dirs:
            dir_path = self.project_root / directory
            status = "✅" if dir_path.exists() else "❌"
            print(f"   {status} {directory}")
        
        print()
        print("🔗 エントリーポイント設定:")
        print("   • Hugging Face Spaces: app.py")
        print("   • ASGI サーバー: app:app")
        print("   • Django ASGI: mysite.asgi:app")
        print("   • 開発サーバー: python bootstrap/app.py")
        print()
        
        # Laravel風ルーティング確認
        routes_files = [
            "routes/web.py",
            "routes/api.py", 
            "routes/polls.py",
            "routes/hybrid.py",
            "routes/laravel_routes.py"
        ]
        
        print("🔗 Laravel風ルーティング:")
        for route_file in routes_files:
            route_path = self.project_root / route_file
            status = "✅" if route_path.exists() else "❌"
            print(f"   {status} {route_file}")
        
        print()
        print("📋 利用可能なエンドポイント:")
        print("   • / - Web Routes (Laravel風)")
        print("   • /api/v1/ - API Routes (Laravel風)")
        print("   • /api/polls/ - Polls API")
        print("   • /hybrid/ - Hybrid Routes")
        print("   • /django/admin/ - Django管理画面")

class GradioTestCommand(ArtisanCommand):
    """Gradio機能テストコマンド"""
    
    def __init__(self):
        super().__init__()
        self.base_url = "http://localhost:7860"
        self.gradio_functions = self._discover_gradio_functions()
    
    def _discover_gradio_functions(self):
        """controllers/フォルダからGradio機能を自動発見"""
        gradio_functions = {}
        controllers_path = self.project_root / "controllers"
        
        if not controllers_path.exists():
            return gradio_functions
            
        for item in controllers_path.iterdir():
            if item.is_dir() and item.name.startswith("gra_"):
                # gra_01_chat -> chat
                function_name = item.name.split("_", 2)[-1] if "_" in item.name else item.name
                gradio_functions[function_name] = {
                    "path": item,
                    "name": function_name,
                    "directory": item.name
                }
        
        return gradio_functions
    
    def handle(self, function_name=None, verbose=False, fix=False, *args, **kwargs):
        """Gradioテストのメイン処理"""
        print("🧪 Gradio機能テスト開始...")
        print(f"📡 テスト対象URL: {self.base_url}")
        print("=" * 50)
        
        if function_name:
            # 個別機能テスト
            result = self._test_single_function(function_name, verbose, fix)
            return result
        else:
            # 全機能テスト
            return self._test_all_functions(verbose, fix)
    
    def _test_single_function(self, function_name, verbose=False, fix=False):
        """単一Gradio機能のテスト"""
        if function_name not in self.gradio_functions:
            print(f"❌ 機能 '{function_name}' が見つかりません")
            print(f"🔍 利用可能な機能: {list(self.gradio_functions.keys())}")
            return False
            
        function_info = self.gradio_functions[function_name]
        print(f"🧪 {function_name} 機能をテスト中...")
        
        # テスト実行
        result = self._run_gradio_test(function_info, verbose)
        
        if not result and fix:
            print(f"🔧 {function_name} の自動修正を試行中...")
            self._attempt_fix(function_info)
            
        return result
    
    def _test_all_functions(self, verbose=False, fix=False):
        """全Gradio機能のテスト"""
        results = {}
        total_functions = len(self.gradio_functions)
        passed_functions = 0
        
        for function_name, function_info in self.gradio_functions.items():
            print(f"🧪 {function_name} 機能をテスト中...")
            result = self._run_gradio_test(function_info, verbose)
            results[function_name] = result
            
            if result:
                passed_functions += 1
            elif fix:
                print(f"🔧 {function_name} の自動修正を試行中...")
                self._attempt_fix(function_info)
        
        # 結果表示
        print("=" * 50)
        print(f"✅ テスト完了: {passed_functions}/{total_functions} 機能が成功")
        if verbose:
            for function_name, result in results.items():
                status = "✅" if result else "❌"
                print(f"  {status} {function_name}")
        
        return passed_functions == total_functions

class RouteListCommand(ArtisanCommand):
    """ルート一覧表示コマンド"""
    
    def handle(self, *args, **kwargs):
        """ルート一覧を表示"""
        print("🛣️  ルート一覧")
        print("=" * 50)
        
        # FastAPIルートの検出
        self._scan_fastapi_routes()
        
        # Gradioルートの検出
        self._scan_gradio_routes()
        
        # Djangoルートの検出（もしあれば）
        self._scan_django_routes()
        
        return True
    
    def _scan_fastapi_routes(self):
        """FastAPIルートを検索"""
        print("\n📍 FastAPI Routes:")
        print("-" * 30)
        
        try:
            # メインアプリファイルを読み込み
            app_files = [
                "app.py",
                "main.py", 
                "app_*.py"
            ]
            
            for app_file in app_files:
                app_path = self.project_root / app_file
                if app_path.exists():
                    print(f"📁 {app_file}:")
                    self._analyze_fastapi_file(app_path)
                    
            # routersディレクトリをスキャン
            routers_dir = self.project_root / "routers"
            if routers_dir.exists():
                print(f"\n📁 routers/:")
                for router_file in routers_dir.glob("**/*.py"):
                    if router_file.name != "__init__.py":
                        print(f"  📄 {router_file.relative_to(self.project_root)}")
                        self._analyze_router_file(router_file)
                        
        except Exception as e:
            print(f"❌ FastAPIルート検出エラー: {e}")
    
    def _scan_gradio_routes(self):
        """Gradioルートを検索"""
        print("\n🎨 Gradio Interfaces:")
        print("-" * 30)
        
        try:
            # routersディレクトリのgradio関連ファイル
            routers_dir = self.project_root / "routers"
            if routers_dir.exists():
                gradio_files = list(routers_dir.glob("**/gra_*/*.py"))
                
                for gradio_file in gradio_files:
                    if gradio_file.name != "__init__.py":
                        interface_name = gradio_file.parent.name
                        print(f"  🎯 {interface_name}: {gradio_file.name}")
                        self._analyze_gradio_file(gradio_file)
                        
        except Exception as e:
            print(f"❌ Gradioルート検出エラー: {e}")
    
    def _scan_django_routes(self):
        """Djangoルートを検索"""
        print("\n🐍 Django URLs:")
        print("-" * 30)
        
        try:
            # urls.pyファイルを検索
            urls_files = list(self.project_root.glob("**/urls.py"))
            
            if urls_files:
                for urls_file in urls_files:
                    print(f"  📄 {urls_file.relative_to(self.project_root)}")
                    self._analyze_django_urls(urls_file)
            else:
                print("  ℹ️  Django URLsファイルが見つかりません")
                
        except Exception as e:
            print(f"❌ DjangoURL検出エラー: {e}")
    
    def _analyze_fastapi_file(self, file_path):
        """FastAPIファイルを解析"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # @app.get, @app.post などを検索
            import re
            routes = re.findall(r'@app\.(get|post|put|delete|patch)\(["\']([^"\']+)["\']', content)
            
            for method, path in routes:
                print(f"    {method.upper():<6} {path}")
                
        except Exception as e:
            print(f"    ❌ 解析エラー: {e}")
    
    def _analyze_router_file(self, file_path):
        """ルーターファイルを解析"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # @router.get, @router.post などを検索
            import re
            routes = re.findall(r'@router\.(get|post|put|delete|patch)\(["\']([^"\']+)["\']', content)
            
            if routes:
                for method, path in routes:
                    print(f"    {method.upper():<6} {path}")
            else:
                # 関数定義を検索
                functions = re.findall(r'def ([a-zA-Z_][a-zA-Z0-9_]*)\(', content)
                if functions:
                    print(f"    📝 Functions: {', '.join(functions[:5])}")
                    
        except Exception as e:
            print(f"    ❌ 解析エラー: {e}")
    
    def _analyze_gradio_file(self, file_path):
        """Gradioファイルを解析"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # gr.Interface, gr.Blocks, gr.TabbedInterface を検索
            import re
            interfaces = re.findall(r'gr\.(Interface|Blocks|TabbedInterface)', content)
            functions = re.findall(r'def ([a-zA-Z_][a-zA-Z0-9_]*)\(', content)
            
            if interfaces:
                print(f"      🎨 Gradio Type: {', '.join(set(interface for interface in interfaces))}")
            if functions:
                print(f"      📝 Functions: {', '.join(functions[:3])}")
                
        except Exception as e:
            print(f"    ❌ 解析エラー: {e}")
    
    def _analyze_django_urls(self, file_path):
        """Django URLsファイルを解析"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # path() や url() を検索
            import re
            paths = re.findall(r'path\(["\']([^"\']+)["\']', content)
            
            for path in paths:
                print(f"    PATH   {path}")
                
        except Exception as e:
            print(f"    ❌ 解析エラー: {e}")

class GradioListCommand(ArtisanCommand):
    """Gradio機能一覧表示コマンド"""
    
    def handle(self, *args, **kwargs):
        """Gradio機能一覧を表示"""
        print("🎨 Gradio機能一覧")
        print("=" * 50)
        
        try:
            routers_dir = self.project_root / "routers"
            if not routers_dir.exists():
                print("❌ routersディレクトリが見つかりません")
                return False
                
            gradio_modules = []
            
            # gra_で始まるディレクトリを検索
            for item in routers_dir.iterdir():
                if item.is_dir() and item.name.startswith('gra_'):
                    gradio_modules.append(item)
            
            if not gradio_modules:
                print("ℹ️  Gradio機能が見つかりません")
                return True
                
            for i, module_dir in enumerate(gradio_modules, 1):
                module_name = module_dir.name
                print(f"\n{i}. 📁 {module_name}")
                
                # モジュール内のPythonファイルを確認
                py_files = list(module_dir.glob("*.py"))
                if py_files:
                    for py_file in py_files:
                        if py_file.name != "__init__.py":
                            print(f"   📄 {py_file.name}")
                            self._analyze_gradio_functionality(py_file)
                else:
                    print("   ℹ️  Pythonファイルが見つかりません")
                    
            return True
            
        except Exception as e:
            print(f"❌ Gradio機能一覧取得エラー: {e}")
            return False
    
    def _analyze_gradio_functionality(self, file_path):
        """Gradio機能を解析"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Gradio関連のキーワードを検索
            import re
            
            # インターフェース種類
            interfaces = re.findall(r'gr\.(Interface|Blocks|TabbedInterface|ChatInterface)', content)
            if interfaces:
                print(f"      🎯 Type: {', '.join(set(interfaces))}")
            
            # 入力コンポーネント
            inputs = re.findall(r'gr\.(Textbox|Button|Slider|Dropdown|FileUpload|Image|Audio)', content)
            if inputs:
                print(f"      📥 Inputs: {', '.join(set(inputs))}")
            
            # 出力コンポーネント
            outputs = re.findall(r'outputs?=.*?gr\.(Textbox|Image|Audio|Video|HTML|Markdown)', content)
            if outputs:
                print(f"      📤 Outputs: {len(outputs)} components")
                
        except Exception as e:
            print(f"      ❌ 解析エラー: {e}")

class MakeMigrationCommand(ArtisanCommand):
    """マイグレーション作成コマンド"""
    
    def handle(self, name, *args, **kwargs):
        migration_path = self.project_root / "database" / "migrations" / f"{datetime.now().strftime('%Y%m%d_%H%M%S')}_{name}.py"
        migration_content = f'''"""
{name} Migration
================

Generated by Artisan on {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
"""

import sqlite3
import os
from datetime import datetime

def up():
    """
    Run the migration
    """
    db_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'database.db')
    
    with sqlite3.connect(db_path) as conn:
        cursor = conn.cursor()
        
        # Example: Create table migration
        create_table_sql = """
            CREATE TABLE IF NOT EXISTS example_table (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                email TEXT UNIQUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """
        cursor.execute(create_table_sql)
        
        conn.commit()
        print(f"✅ Migration {name} executed successfully")

def down():
    """
    Reverse the migration
    """
    db_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'database.db')
    
    with sqlite3.connect(db_path) as conn:
        cursor = conn.cursor()
        
        # Example: Drop table migration
        cursor.execute('DROP TABLE IF EXISTS example_table')
        
        conn.commit()
        print(f"✅ Migration {name} rolled back successfully")

if __name__ == "__main__":
    import sys
    if len(sys.argv) > 1 and sys.argv[1] == "down":
        down()
    else:
        up()
'''
        
        # ディレクトリ作成
        migration_path.parent.mkdir(parents=True, exist_ok=True)
        
        # ファイル作成
        with open(migration_path, 'w', encoding='utf-8') as f:
            f.write(migration_content)
            
        print(f"✅ Migration created: {migration_path}")
        return True

class ActiveRouteListCommand(ArtisanCommand):
    """アクティブなルートのみを表示するコマンド"""
    
    def handle(self, *args, **kwargs):
        """アクティブなルート一覧のみを表示"""
        print("🛣️  アクティブルート一覧")
        print("=" * 50)
        print("※ 実際にロードされているルートのみ表示")
        
        # FastAPIルートの検出（アクティブのみ）
        self._scan_active_fastapi_routes()
        
        # Gradioルートの検出（アクティブのみ）
        self._scan_active_gradio_routes()
        
        # Djangoルートの検出（アクティブのみ）
        self._scan_active_django_routes()
        
        return True
    
    def _scan_active_fastapi_routes(self):
        """アクティブなFastAPIルートのみをスキャン"""
        print("\n📍 Active FastAPI Routes:")
        print("-" * 30)
        
        # mysite/asgi.pyがメインエントリーポイント
        asgi_path = self.project_root / "mysite" / "asgi.py"
        if asgi_path.exists():
            print("📁 mysite/asgi.py:")
            self._extract_routes_from_file(asgi_path)
        
        # app.pyとmain.py（Hugging Face Spaces用）
        main_files = ["app.py", "main.py"]
        for main_file in main_files:
            main_path = self.project_root / main_file
            if main_path.exists():
                print(f"📁 {main_file}:")
                self._extract_routes_from_file(main_path)
        
        # アクティブなroutersのみ（workspaceは除外）
        routers_dir = self.project_root / "routers"
        if routers_dir.exists():
            print(f"\n📁 routers/ (active only):")
            # 直接のPythonファイル
            for py_file in routers_dir.glob("*.py"):
                if py_file.name not in ["__init__.py"]:
                    relative_path = py_file.relative_to(self.project_root)
                    print(f"  📄 {relative_path}")
                    self._extract_routes_from_file(py_file)
            
            # gra_*サブディレクトリ（アクティブ）
            for subdir in routers_dir.iterdir():
                if subdir.is_dir() and subdir.name.startswith('gra_'):
                    for py_file in subdir.glob("*.py"):
                        if py_file.name not in ["__init__.py"]:
                            relative_path = py_file.relative_to(self.project_root)
                            print(f"  📄 {relative_path}")
                            self._extract_gradio_functions(py_file)
    
    def _scan_active_gradio_routes(self):
        """アクティブなGradioインターフェースのみをスキャン"""
        print("\n🎨 Active Gradio Interfaces:")
        print("-" * 30)
        
        # controllers/ディレクトリをスキャン（実際にロードされるもの）
        controllers_dir = self.project_root / "controllers"
        if controllers_dir.exists():
            for subdir in controllers_dir.iterdir():
                if subdir.is_dir() and subdir.name.startswith('gra_'):
                    print(f"  🎯 {subdir.name}: ", end="")
                    
                    py_files = [f for f in subdir.glob("*.py") if f.name != "__init__.py"]
                    if py_files:
                        main_file = py_files[0]  # 最初のファイルを代表として
                        print(f"{main_file.name}")
                        self._analyze_gradio_interface(main_file)
                    else:
                        print("No Python files")
    
    def _scan_active_django_routes(self):
        """アクティブなDjangoURLのみをスキャン"""
        print("\n🐍 Active Django URLs:")
        print("-" * 30)
        
        # mysite/urls.pyをメインとして確認
        main_urls = self.project_root / "mysite" / "urls.py"
        if main_urls.exists():
            print(f"  📄 mysite/urls.py")
            self._extract_django_patterns(main_urls)
        
        # polls/urls.py（アクティブ）
        polls_urls = self.project_root / "polls" / "urls.py"
        if polls_urls.exists():
            print(f"  📄 polls/urls.py")
            self._extract_django_patterns(polls_urls)
    
    def _extract_routes_from_file(self, file_path):
        """ファイルからルートを抽出"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            import re
            
            # FastAPI デコレータルート
            route_patterns = [
                r'@app\.(get|post|put|delete|patch)\(["\']([^"\']+)["\']',
                r'@router\.(get|post|put|delete|patch)\(["\']([^"\']+)["\']'
            ]
            
            routes_found = []
            for pattern in route_patterns:
                matches = re.findall(pattern, content)
                for method, path in matches:
                    routes_found.append((method.upper(), path))
            
            if routes_found:
                for method, path in routes_found:
                    print(f"    {method:<6} {path}")
            
        except Exception as e:
            print(f"    ❌ Error reading {file_path}: {e}")
    
    def _extract_gradio_functions(self, file_path):
        """GradioファイルからGradio関数を抽出"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            import re
            
            # 一般的な関数定義を検索
            function_pattern = r'def\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*\('
            functions = re.findall(function_pattern, content)
            
            # __で始まる内部関数や特殊メソッドを除外
            user_functions = [f for f in functions if not f.startswith('_')]
            
            if user_functions:
                print(f"    📝 Functions: {', '.join(user_functions)}")
        except Exception as e:
            print(f"    ❌ Error reading gradio file: {e}")
    
    def _analyze_gradio_interface(self, file_path):
        """Gradioインターフェースを解析"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            import re
            
            # Gradioタイプを検出
            gradio_types = re.findall(r'gr\.(Interface|Blocks|TabbedInterface|ChatInterface)', content)
            if gradio_types:
                print(f"      🎨 Gradio Type: {', '.join(set(gradio_types))}")
            
            # 関数定義を検出
            functions = re.findall(r'def\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*\(', content)
            user_functions = [f for f in functions if not f.startswith('_')]
            if user_functions:
                print(f"      📝 Functions: {', '.join(user_functions)}")
                
        except Exception as e:
            print(f"      ❌ Analysis error: {e}")
    
    def _extract_django_patterns(self, file_path):
        """DjangoのURLパターンを抽出"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            import re
            
            # Django URL パターンを検索
            patterns = [
                r'path\(["\']([^"\']*)["\']',
                r'url\(["\']([^"\']*)["\']'
            ]
            
            urls_found = []
            for pattern in patterns:
                matches = re.findall(pattern, content)
                urls_found.extend(matches)
            
            if urls_found:
                for url in urls_found:
                    print(f"    PATH   {url}")
            
        except Exception as e:
            print(f"    ❌ Error reading Django URLs: {e}")

class CICDCommand(ArtisanCommand):
    """CI/CDパイプライン管理コマンド"""
    
    def handle(self, action="test", *args, **kwargs):
        """CI/CDパイプラインのアクション実行"""
        print(f"🚀 CI/CD Pipeline - {action.upper()}")
        print("=" * 50)
        
        if action == "test":
            return self._run_tests()
        elif action == "routes":
            return self._check_routes()
        elif action == "gradio":
            return self._test_gradio()
        elif action == "full":
            return self._run_full_pipeline()
        else:
            print(f"❌ Unknown action: {action}")
            print("Available actions: test, routes, gradio, full")
            return False
    
    def _run_tests(self):
        """基本テストを実行"""
        print("🧪 Running basic tests...")
        
        try:
            # ルートAPIテスト
            from routers.route_api import scanner
            active_routes = scanner.scan_active_routes()
            
            print(f"✅ Route Scanner: OK")
            print(f"📍 FastAPI Routes: {len(active_routes.get('fastapi_routes', []))}")
            print(f"🎨 Gradio Interfaces: {len(active_routes.get('gradio_interfaces', []))}")
            print(f"🐍 Django URLs: {len(active_routes.get('django_urls', []))}")
            
            return True
            
        except Exception as e:
            print(f"❌ Test failed: {e}")
            return False
    
    def _check_routes(self):
        """ルートチェック"""
        print("🛣️ Checking routes...")
        
        try:
            from routers.route_api import scanner
            
            all_routes = scanner.scan_all_routes()
            active_routes = scanner.scan_active_routes()
            
            all_total = all_routes.get('summary', {}).get('total_routes', 0)
            active_total = active_routes.get('summary', {}).get('total_routes', 0)
            
            print(f"📊 Total Routes: {all_total}")
            print(f"🎯 Active Routes: {active_total}")
            
            if active_total > 0:
                ratio = (active_total / all_total) * 100 if all_total > 0 else 0
                print(f"📈 Active Ratio: {ratio:.1f}%")
            
            return True
            
        except Exception as e:
            print(f"❌ Route check failed: {e}")
            return False
    
    def _test_gradio(self):
        """Gradioテスト"""
        print("🎨 Testing Gradio interfaces...")
        
        try:
            from app.Http.Controllers.GradioController import GradioController
            controller = GradioController()
            interface_info = controller.get_interface_list()
            
            total_interfaces = interface_info.get('total_count', 0)
            print(f"✅ Gradio Controller: OK")
            print(f"🎨 Total Interfaces: {total_interfaces}")
            
            if total_interfaces > 0:
                print("📝 Interface Names:")
                for name in interface_info.get('interface_names', [])[:5]:
                    print(f"   • {name}")
                if total_interfaces > 5:
                    print(f"   ... and {total_interfaces - 5} more")
            
            return True
            
        except Exception as e:
            print(f"❌ Gradio test failed: {e}")
            return False
    
    def _run_full_pipeline(self):
        """フルCI/CDパイプライン実行"""
        print("🔄 Running full CI/CD pipeline...")
        
        results = {
            "routes": self._check_routes(),
            "gradio": self._test_gradio(),
            "tests": self._run_tests()
        }
        
        passed = sum(results.values())
        total = len(results)
        
        print("\n📊 Pipeline Results:")
        print("-" * 30)
        for test, result in results.items():
            status = "✅ PASS" if result else "❌ FAIL"
            print(f"  {status} {test.capitalize()}")
        
        print(f"\n🎯 Overall: {passed}/{total} tests passed")
        
        if passed == total:
            print("🎉 All tests passed! Pipeline successful.")
            return True
        else:
            print("⚠️ Some tests failed. Check the issues above.")
            return False

def main():
    """Artisanメイン関数"""
    parser = argparse.ArgumentParser(
        description='🎨 Artisan - Laravel風コマンドラインツール for Python',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
利用可能なコマンド:
  route:list              ルート一覧を表示（全て）
  route:active            アクティブなルートのみ表示
  make:controller <name>   コントローラーを作成
  make:model <name>       モデルを作成
  make:migration <name>   マイグレーションを作成
  gradio:test            Gradio機能をテスト
  gradio:list            Gradio機能一覧を表示
  
例:
  python artisan route:list
  python artisan make:controller UserController
  python artisan gradio:test --fix
        """
    )
    
    parser.add_argument('command', nargs='?', help='実行するコマンド')
    parser.add_argument('name', nargs='?', help='作成するリソース名')
    parser.add_argument('--fix', action='store_true', help='エラーの自動修正を試行')
    parser.add_argument('--verbose', '-v', action='store_true', help='詳細出力')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    # コマンド実行
    try:
        if args.command == 'route:list':
            RouteListCommand().handle()
            
        elif args.command == 'route:active':
            ActiveRouteListCommand().handle()
            
        elif args.command == 'make:controller':
            if not args.name:
                print("❌ コントローラー名を指定してください")
                print("例: python artisan make:controller UserController")
                return
            MakeControllerCommand().handle(args.name)
            
        elif args.command == 'make:model':
            if not args.name:
                print("❌ モデル名を指定してください")
                print("例: python artisan make:model User")
                return
            MakeModelCommand().handle(args.name)
            
        elif args.command == 'make:migration':
            if not args.name:
                print("❌ マイグレーション名を指定してください")
                print("例: python artisan make:migration create_users_table")
                return
            MakeMigrationCommand().handle(args.name)
            
        elif args.command == 'cicd':
            action = args.name if args.name else "test"
            CICDCommand().handle(action, verbose=args.verbose)
            
        elif args.command == 'gradio:test':
            GradioTestCommand().handle(fix=args.fix, verbose=args.verbose)
            
        elif args.command == 'gradio:list':
            GradioListCommand().handle()
            
        else:
            print(f"❌ 不明なコマンド: {args.command}")
            parser.print_help()
            
    except Exception as e:
        print(f"❌ コマンド実行エラー: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    main()